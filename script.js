// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    initSmoothScrolling();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    initModal();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    initForm();
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
    initScrollAnimations();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
function initSmoothScrolling() {
    const navLinks = document.querySelectorAll('nav a');
    
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            const targetSection = document.querySelector(targetId);
            
            if (targetSection) {
                const headerHeight = document.querySelector('header').offsetHeight;
                const targetPosition = targetSection.offsetTop - headerHeight;
                
                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function initModal() {
    const modal = document.getElementById('carModal');
    const sellCarBtn = document.getElementById('sellCarBtn');
    const closeModal = document.getElementById('closeModal');
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    if (sellCarBtn && modal) {
        sellCarBtn.addEventListener('click', function() {
            modal.classList.add('visible');
            document.body.style.overflow = 'hidden';
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    if (closeModal && modal) {
        closeModal.addEventListener('click', function() {
            modal.classList.remove('visible');
            document.body.style.overflow = 'auto';
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ –æ–±–ª–∞—Å—Ç–∏
    window.addEventListener('click', function(e) {
        const modal = document.getElementById('carModal');
        if (e.target === modal) {
            modal.classList.remove('visible');
            document.body.style.overflow = 'auto';
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
function initForm() {
    const carForm = document.getElementById('carForm');
    
    if (carForm) {
        carForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä
            const loader = document.getElementById('loader');
            if (loader) {
                loader.style.display = 'flex';
            }
            
            // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            setTimeout(function() {
                // –°–∫—Ä—ã—Ç—å –ª–æ–∞–¥–µ—Ä
                if (loader) {
                    loader.style.display = 'none';
                }
                
                // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                showNotification('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
                
                // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                const modal = document.getElementById('carModal');
                if (modal) {
                    modal.classList.remove('visible');
                }
                document.body.style.overflow = 'auto';
                
                // –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
                carForm.reset();
            }, 2000);
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type) {
    const notification = document.getElementById('notification');
    
    if (notification) {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        notification.textContent = message;
        notification.style.backgroundColor = type === 'success' ? '#4CAF50' : '#f44336';
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification.classList.add('show');
        
        // –°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(function() {
            notification.classList.remove('show');
        }, 5000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–π –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
function initScrollAnimations() {
    const animatedElements = document.querySelectorAll('.feature-card, .step-card, .contact-card');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.animation = 'fadeInUp 1s ease-out forwards';
                observer.unobserve(entry.target);
            }
        });
    }, { threshold: 0.1 });
    
    // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –≤—Å–µ–º–∏ –∞–Ω–∏–º–∏—Ä—É–µ–º—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    animatedElements.forEach(element => {
        element.style.opacity = '0';
        observer.observe(element);
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
document.querySelectorAll('.btn').forEach(btn => {
    btn.addEventListener('mouseenter', function() {
        this.style.transform = 'scale(1.05)';
    });
    
    btn.addEventListener('mouseleave', function() {
        this.style.transform = '';
    });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
document.querySelectorAll('.feature-card, .step-card, .contact-card').forEach(card => {
    card.addEventListener('mouseenter', function() {
        this.style.boxShadow = '0 15px 30px rgba(0, 0, 0, 0.15)';
    });
    
    card.addEventListener('mouseleave', function() {
        this.style.boxShadow = '0 5px 15px rgba(0, 0, 0, 0.1)';
    });
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded');
    initSmoothScrolling();
    initModal();
    initForm(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É
    initScrollAnimations();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
function initForm() {
    console.log('Initializing form...');
    const carForm = document.getElementById('carForm');
    
    if (!carForm) {
        console.error('Form not found!');
        return;
    }
    
    console.log('Form found, adding event listener');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    carForm.replaceWith(carForm.cloneNode(true));
    const freshForm = document.getElementById('carForm');
    
    // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    let isSending = false;
    let lastSubmissionHash = '';
    let lastSubmissionTime = 0;
    
    freshForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        console.log('Form submitted!');
        
        const currentTime = Date.now();
        const formData = {
            brand: document.getElementById('brand').value,
            model: document.getElementById('model').value,
            year: document.getElementById('year').value,
            price: document.getElementById('price').value,
            name: document.getElementById('name').value,
            phone: document.getElementById('phone').value
        };
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö—ç—à –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏
        const submissionHash = Object.values(formData).join('|') + '|' + currentTime;
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π (–º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥)
        if (currentTime - lastSubmissionTime < 5000) {
            console.log('‚ö†Ô∏è Too fast submission, ignoring...');
            return;
        }
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        if (submissionHash === lastSubmissionHash) {
            console.log('‚ö†Ô∏è Duplicate submission, ignoring...');
            return;
        }
        
        // –ï—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if (isSending) {
            console.log('‚ö†Ô∏è Form is already sending, ignoring...');
            return;
        }
        
        isSending = true;
        lastSubmissionHash = submissionHash;
        lastSubmissionTime = currentTime;
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        const submitBtn = freshForm.querySelector('button[type="submit"]');
        const originalBtnText = submitBtn.textContent;
        submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
        submitBtn.disabled = true;

        // –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä
        const loader = document.getElementById('loader');
        if (loader) {
            console.log('Showing loader');
            loader.style.display = 'flex';
        }

        console.log('Form data:', formData);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageText = `
üöó –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è

–ú–∞—Ä–∫–∞: ${formData.brand}
–ú–æ–¥–µ–ª—å: ${formData.model}
–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: ${formData.year}
–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: ${formData.price} —Ä—É–±.
–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: ${formData.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}

–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}
        `;

        console.log('Message text:', messageText);

        const botToken = '8112921007:AAHvjM0SWYMZDh3xucPLMMfKyPmZ7TYfztY';
        const chatIds = ['1049514305', '1039331603'];

        console.log('Trying to send to Telegram...');

        // 2. –ü–†–û–ë–£–ï–ú –û–¢–ü–†–ê–í–ò–¢–¨ –í TELEGRAM
        let telegramSuccess = false;
        let sentMessages = 0;
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø–µ—Ä–≤—ã–π —á–∞—Ç
            const response1 = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: chatIds[0],
                    text: messageText
                })
            });
            
            if (response1.ok) {
                console.log('‚úÖ Telegram message sent successfully to first chat!');
                telegramSuccess = true;
                sentMessages++;
                
                // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ –≤—Ç–æ—Ä–æ–π —á–∞—Ç
                try {
                    const response2 = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            chat_id: chatIds[1],
                            text: messageText
                        })
                    });
                    
                    if (response2.ok) {
                        console.log('‚úÖ Message sent to second chat too!');
                        sentMessages++;
                    } else {
                        console.log('‚ùå Second chat error:', response2.status);
                    }
                } catch (secondError) {
                    console.log('Second chat request failed:', secondError.message);
                }
                
            } else {
                console.log('‚ùå Telegram API error:', response1.status);
            }
            
        } catch (error) {
            console.log('‚ùå Telegram request failed:', error.message);
        }

        // 3. –°–û–•–†–ê–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –í –õOCALSTORAGE
        try {
            const submissions = JSON.parse(localStorage.getItem('carSubmissions') || '[]');
            submissions.push({
                data: formData,
                message: messageText,
                timestamp: new Date().toISOString(),
                sentToTelegram: telegramSuccess,
                messagesSent: sentMessages
            });
            
            localStorage.setItem('carSubmissions', JSON.stringify(submissions));
            console.log('‚úÖ Data saved to localStorage');
            
        } catch (storageError) {
            console.error('Storage error:', storageError);
        }

        // 4. –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ö–ù–û–ü–ö–£
        submitBtn.textContent = originalBtnText;
        submitBtn.disabled = false;

        // 5. –°–ö–†–´–í–ê–ï–ú –õ–û–ê–î–ï–†
        if (loader) {
            loader.style.display = 'none';
        }

        // 6. –ü–û–ö–ê–ó–´–í–ê–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
        if (telegramSuccess) {
            showNotification('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ.', 'success');
        } else {
            showNotification('‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ú—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.', 'warning');
        }

        // 7. –ó–ê–ö–†–´–í–ê–ï–ú –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –ò –û–ß–ò–©–ê–ï–ú –§–û–†–ú–£
        const modal = document.getElementById('carModal');
        if (modal) {
            modal.classList.remove('visible');
        }
        document.body.style.overflow = 'auto';
        freshForm.reset();
        
        console.log('Form processing completed. Total messages sent:', sentMessages);
        
        // 8. –†–ê–ó–ë–õ–û–ö–ò–†–£–ï–ú –§–û–†–ú–£
        isSending = false;
        
    }, { once: true }); // { once: true } –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type) {
    console.log('Showing notification:', message);
    const notification = document.getElementById('notification');
    
    if (notification) {
        notification.textContent = message;
        notification.style.backgroundColor = type === 'success' ? '#4CAF50' : '#ff9800';
        notification.classList.add('show');
        
        setTimeout(function() {
            notification.classList.remove('show');
        }, 5000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
function checkSavedSubmissions() {
    console.log('=== CHECKING SAVED SUBMISSIONS ===');
    const submissions = JSON.parse(localStorage.getItem('carSubmissions') || '[]');
    console.log('Total submissions:', submissions.length);
    submissions.forEach((sub, index) => {
        console.log(`--- Submission ${index + 1} ---`);
        console.log('Data:', sub.data);
        console.log('Sent to Telegram:', sub.sentToTelegram);
        console.log('Messages sent:', sub.messagesSent);
        console.log('Timestamp:', sub.timestamp);
    });
    return submissions;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.checkSubmissions = checkSavedSubmissions;
window.clearSubmissions = function() {
    localStorage.removeItem('carSubmissions');
    console.log('Submissions cleared');
};
});